// practica-detalle.js - Script completo para la p√°gina de detalle de pr√°cticas

document.addEventListener('DOMContentLoaded', function() {
    cargarDetallePractica();
    configurarNavegacion();
    configurarChatbot();
});

// Datos completos de pr√°cticas profesionales por carrera
const practicasDataCompleto = {
    'Ingenier√≠a en Sistemas': [
        {
            titulo: 'Sistema de gesti√≥n bibliotecaria',
            icono: 'üíª',
            descripcion: `
                <p>Desarrollar√°s un sistema completo de gesti√≥n bibliotecaria que incluye autenticaci√≥n de usuarios, cat√°logo de libros, sistema de pr√©stamos y reportes administrativos.</p>
                <p>Este proyecto te permitir√° aplicar conceptos de desarrollo full-stack, bases de datos relacionales, autenticaci√≥n segura y arquitectura de software escalable.</p>
                <p><strong>Stack tecnol√≥gico:</strong> React.js + Spring Boot + PostgreSQL + JWT Authentication</p>
            `,
            objetivos: [
                'Implementar un sistema CRUD completo con operaciones complejas',
                'Dise√±ar y normalizar una base de datos relacional',
                'Desarrollar APIs RESTful seguras y bien documentadas',
                'Crear interfaces de usuario intuitivas y responsive',
                'Implementar autenticaci√≥n y autorizaci√≥n robusta',
                'Aplicar patrones de dise√±o y buenas pr√°cticas de desarrollo'
            ],
            pasos: `
                <div class="step-block">
                    <h4>üìã Fase 1: An√°lisis y Dise√±o (Semana 1)</h4>
                    <ul>
                        <li>An√°lisis de requerimientos funcionales y no funcionales</li>
                        <li>Dise√±o de la base de datos (modelo ER, normalizaci√≥n)</li>
                        <li>Arquitectura del sistema (frontend, backend, base de datos)</li>
                        <li>Wireframes y mockups de interfaces principales</li>
                        <li>Definici√≥n de APIs y endpoints</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>üóÑÔ∏è Fase 2: Base de Datos (Semana 2)</h4>
                    <ul>
                        <li>Creaci√≥n de tablas: usuarios, libros, autores, categor√≠as, pr√©stamos</li>
                        <li>Implementaci√≥n de relaciones y restricciones</li>
                        <li>Creaci√≥n de √≠ndices para optimizaci√≥n</li>
                        <li>Scripts de datos de prueba</li>
                        <li>Procedimientos almacenados para operaciones complejas</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>‚öôÔ∏è Fase 3: Backend con Spring Boot (Semanas 3-4)</h4>
                    <ul>
                        <li>Configuraci√≥n del proyecto Spring Boot</li>
                        <li>Entidades JPA y repositorios</li>
                        <li>Servicios de negocio y DTOs</li>
                        <li>Controladores REST con validaciones</li>
                        <li>Autenticaci√≥n JWT y autorizaci√≥n por roles</li>
                        <li>Manejo de excepciones y logging</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>üé® Fase 4: Frontend con React (Semanas 5-6)</h4>
                    <ul>
                        <li>Configuraci√≥n del proyecto React con Create React App</li>
                        <li>Componentes reutilizables y hooks personalizados</li>
                        <li>Gesti√≥n de estado con Context API o Redux</li>
                        <li>Consumo de APIs REST del backend</li>
                        <li>Rutas y navegaci√≥n en el frontend</li>
                        <li>Validaci√≥n de formularios</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>üöÄ Fase 5: Despliegue y Pruebas (Semana 7)</h4>
                    <ul>
                        <li>Pruebas unitarias y de integraci√≥n</li>
                        <li>Optimizaci√≥n del rendimiento</li>
                        <li>Despliegue del backend en un servicio cloud (ej. Heroku)</li>
                        <li>Despliegue del frontend en un servicio de hosting est√°tico (ej. Netlify)</li>
                        <li>Documentaci√≥n del proyecto</li>
                    </ul>
                </div>
            `,
            recursos: [
                'React.js - Documentaci√≥n oficial', 
                'Spring Boot - Gu√≠a de inicio', 
                'PostgreSQL - Tutoriales de bases de datos',
                'JWT Authentication - Gu√≠a de implementaci√≥n'
            ]
        },
        {
            titulo: 'Plataforma de e-commerce b√°sica',
            icono: 'üõí',
            descripcion: `<p>Desarrollar√°s una plataforma de comercio electr√≥nico funcional que incluye un cat√°logo de productos, un carrito de compras y un proceso de pago simplificado.`,
            objetivos: [
                'Crear una interfaz de usuario para el cat√°logo de productos',
                'Implementar la l√≥gica del carrito de compras (agregar, eliminar, actualizar)',
                'Simular un proceso de pago seguro',
                'Aplicar conceptos de gesti√≥n de estado',
                'Dise√±ar un backend que gestione los productos y pedidos'
            ],
            pasos: `
                <div class="step-block">
                    <h4>üìã Fase 1: Dise√±o y Planificaci√≥n</h4>
                    <ul>
                        <li>Dise√±o de la interfaz de usuario (UI)</li>
                        <li>Definici√≥n de las entidades (Producto, Carrito, Pedido)</li>
                        <li>Diagrama de flujo del proceso de compra</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>üíª Fase 2: Desarrollo Frontend</h4>
                    <ul>
                        <li>Creaci√≥n de la p√°gina principal con el cat√°logo de productos</li>
                        <li>Desarrollo del componente del carrito de compras</li>
                        <li>Implementaci√≥n de la p√°gina de checkout</li>
                    </ul>
                </div>
            `,
            recursos: [
                'Curso de React para e-commerce',
                'Gu√≠a de Stripe API para pagos'
            ]
        }
    ],
    'Medicina': [
        {
            titulo: 'An√°lisis de casos cl√≠nicos',
            icono: 'üë®‚Äç‚öïÔ∏è',
            descripcion: `
                <p>Analizar√°s una serie de casos cl√≠nicos simulados, identificando s√≠ntomas, posibles diagn√≥sticos y planes de tratamiento. Aprender√°s a integrar informaci√≥n de diferentes fuentes para tomar decisiones informadas.`,
            objetivos: [
                'Desarrollar habilidades de diagn√≥stico diferencial',
                'Integrar conocimientos de anatom√≠a y fisiolog√≠a en la pr√°ctica',
                'Formular planes de tratamiento l√≥gicos y coherentes',
                'Mejorar el razonamiento cl√≠nico'
            ],
            pasos: `
                <div class="step-block">
                    <h4>üìã Fase 1: Recopilaci√≥n de Informaci√≥n</h4>
                    <ul>
                        <li>Lee detenidamente la historia cl√≠nica y los s√≠ntomas del paciente.</li>
                        <li>Identifica los hallazgos clave en los resultados de laboratorio.</li>
                    </ul>
                </div>
                <div class="step-block">
                    <h4>üß† Fase 2: Diagn√≥stico</h4>
                    <ul>
                        <li>Formula una lista de posibles diagn√≥sticos (diagn√≥stico diferencial).</li>
                        <li>Justifica cada diagn√≥stico con evidencia de la historia cl√≠nica.</li>
                        <li>Selecciona el diagn√≥stico m√°s probable.</li>
                    </ul>
                </div>
            `,
            recursos: [
                'Base de datos de casos cl√≠nicos',
                'Libro: Fisiopatolog√≠a para estudiantes'
            ]
        }
    ]
    // ... (otras carreras y pr√°cticas)
};

// Variable para almacenar el estado de la pr√°ctica actual
let practicaActual;

// Funci√≥n para obtener la carrera y pr√°ctica desde la URL
function obtenerParametrosURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const carreraNombre = urlParams.get('carrera');
    const practicaTitulo = urlParams.get('practica');
    return { carreraNombre, practicaTitulo };
}

// Funci√≥n para cargar el contenido de la pr√°ctica
function cargarDetallePractica() {
    const { carreraNombre, practicaTitulo } = obtenerParametrosURL();
    const practicasDeCarrera = practicasDataCompleto[carreraNombre];

    if (practicasDeCarrera) {
        practicaActual = practicasDeCarrera.find(p => p.titulo === practicaTitulo);
    }

    if (practicaActual) {
        document.getElementById('practice-title').textContent = `${carreraNombre}: ${practicaActual.titulo}`;
        document.getElementById('practice-info').style.display = 'block';

        document.getElementById('practice-description').innerHTML = practicaActual.descripcion;
        document.getElementById('objectives-list').innerHTML = practicaActual.objetivos.map(obj => `<li>${obj}</li>`).join('');
        document.getElementById('practice-steps').innerHTML = practicaActual.pasos;

        const resourcesList = document.getElementById('resources-list');
        if (resourcesList) {
            resourcesList.innerHTML = practicaActual.recursos.map(rec => `
                <li class="resource-item">
                    üîó ${rec}
                </li>
            `).join('');
        }
        
        simularProgresoPractica();
    } else {
        document.getElementById('practice-info').innerHTML = `<p style="text-align: center; color: #ff6347;">No se encontr√≥ la pr√°ctica o la carrera.</p>`;
    }
}

// Funci√≥n para manejar la navegaci√≥n entre pr√°cticas
function configurarNavegacion() {
    const { carreraNombre, practicaTitulo } = obtenerParametrosURL();
    const practicasDeCarrera = practicasDataCompleto[carreraNombre];
    const currentIndex = practicasDeCarrera.findIndex(p => p.titulo === practicaTitulo);

    const prevBtn = document.getElementById('prev-practice');
    const nextBtn = document.getElementById('next-practice');

    if (currentIndex > 0) {
        prevBtn.disabled = false;
        prevBtn.onclick = () => {
            const prevPractica = practicasDeCarrera[currentIndex - 1];
            window.location.href = `practica-detalle.html?carrera=${encodeURIComponent(carreraNombre)}&practica=${encodeURIComponent(prevPractica.titulo)}`;
        };
    } else {
        prevBtn.disabled = true;
    }

    if (currentIndex < practicasDeCarrera.length - 1) {
        nextBtn.disabled = false;
        nextBtn.onclick = () => {
            const nextPractica = practicasDeCarrera[currentIndex + 1];
            window.location.href = `practica-detalle.html?carrera=${encodeURIComponent(carreraNombre)}&practica=${encodeURIComponent(nextPractica.titulo)}`;
        };
    } else {
        nextBtn.textContent = 'Volver a Carreras';
        nextBtn.onclick = () => {
            window.location.href = `carreras.html`;
        };
    }
}

// L√≥gica de chatbot para pr√°cticas
function configurarChatbot() {
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-chat');
    const chatWindow = document.getElementById('chat-window');

    if (!chatInput || !sendBtn || !chatWindow) return;
    
    function agregarMensaje(remitente, mensaje) {
        const msgDiv = document.createElement('div');
        msgDiv.innerHTML = `<strong>${remitente}:</strong> ${mensaje}`;
        chatWindow.appendChild(msgDiv);
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    const { carreraNombre } = obtenerParametrosURL();
    
    // Respuestas predefinidas del bot
    const respuestasPorCarrera = {
        'Ingenier√≠a en Sistemas': {
            'backend': 'El backend se encarga de la l√≥gica del servidor, la base de datos y la autenticaci√≥n. Puedes usar frameworks como Spring Boot o Node.js.',
            'frontend': 'El frontend es la parte de la interfaz de usuario. Tecnolog√≠as como React, Angular o Vue.js son populares para construirla.',
            'base de datos': 'Una base de datos relacional como PostgreSQL es ideal para almacenar datos estructurados y se comunica a trav√©s de SQL.',
            'autenticaci√≥n': 'La autenticaci√≥n JWT es un m√©todo seguro para verificar la identidad de un usuario sin tener que guardar su estado en el servidor.',
            'dise√±o': 'Antes de programar, es vital dise√±ar la arquitectura, el modelo de datos y las interfaces. Esto previene errores futuros.'
        },
        'Medicina': {
            'diagn√≥stico': 'El diagn√≥stico diferencial es un proceso para distinguir una enfermedad de otras con s√≠ntomas similares.',
            'historia cl√≠nica': 'La historia cl√≠nica es un registro de todos los eventos de salud del paciente y es fundamental para el diagn√≥stico correcto.',
            'tratamiento': 'El plan de tratamiento debe ser personalizado para cada paciente, considerando su diagn√≥stico, historial y preferencias.'
        }
    };
    
    function respuestaBot(mensaje) {
        const mensajeLower = mensaje.toLowerCase();

        // B√∫squeda en respuestas por carrera espec√≠fica
        const respuestasCarrera = respuestasPorCarrera[carreraNombre] || {};
        for (const [palabra, respuesta] of Object.entries(respuestasCarrera)) {
            if (mensajeLower.includes(palabra)) {
                return respuesta;
            }
        }
        
        // Respuestas generales
        if (mensajeLower.includes('ayuda') || mensajeLower.includes('help')) {
            return 'Estoy aqu√≠ para ayudarte con tu proyecto pr√°ctico. Puedes preguntarme sobre metodolog√≠a, herramientas, o cualquier aspecto t√©cnico espec√≠fico.';
        }
        
        if (mensajeLower.includes('tiempo') || mensajeLower.includes('cronograma')) {
            return 'El cronograma es importante para el √©xito del proyecto. Te sugiero dividir el trabajo en fases y establecer hitos claros. ¬øNecesitas ayuda planificando alguna fase espec√≠fica?';
        }
        
        if (mensajeLower.includes('herramientas') || mensajeLower.includes('software')) {
            return 'Las herramientas correctas pueden hacer la diferencia. ¬øQu√© tipo de herramientas necesitas para tu proyecto?';
        }
        
        if (mensajeLower.includes('error') || mensajeLower.includes('problema')) {
            return 'Los errores son parte del aprendizaje. Describe el problema espec√≠fico y te ayudo a encontrar una soluci√≥n.';
        }
        
        // Respuesta por defecto
        return 'Interesante pregunta. ¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© aspecto del proyecto te gustar√≠a explorar? Estoy aqu√≠ para ayudarte con cualquier duda t√©cnica o metodol√≥gica.';
    }

    function enviarMensaje() {
        const mensaje = chatInput.value.trim();
        if (mensaje) {
            agregarMensaje('T√∫', mensaje);
            chatInput.value = '';
            
            setTimeout(function() {
                agregarMensaje('Asistente', respuestaBot(mensaje));
            }, 1000);
        }
    }
    
    sendBtn.addEventListener('click', enviarMensaje);
    
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            enviarMensaje();
        }
    });
}

// Simular el progreso de la pr√°ctica
function simularProgresoPractica() {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (progressFill && progressText) {
        let progreso = 0;
        const intervalo = setInterval(function() {
            progreso += 5;
            progressFill.style.width = progreso + '%';
            progressText.textContent = progreso + '%';
            
            if (progreso >= 25) {
                progressFill.style.background = 'linear-gradient(90deg, #fc5c7d, #6a82fb)';
            }
            if (progreso >= 100) {
                clearInterval(intervalo);
                progressText.textContent = '100% - ¬°Pr√°ctica completada!';
                progressFill.style.background = 'linear-gradient(90deg, #e91e63, #c2185b)';
            }
        }, 100);
    }
}